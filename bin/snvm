#!/bin/bash

# Save state
restore=$PWD

# Our storage location
storage_dir=/usr/local/snvm

# Make sure our folder exits
if [ ! -d $storage_dir ] ;
then
    mkdir $storage_dir
fi

# The command to perform
cmd=$1

# Checks if there's a leading `v` in the version
if [[ $2 == v* ]] ;
then
    version=$2
else
    version=v$2
fi

install () {

    # Make sure there's a version specified
    if [[ "$version" != v* ]] ;
    then
        usage
        exit 1
    fi

    # Enter our storage dir
    cd $storage_dir

    # If we already have the version you want on hand
    # use that instead of fetching a new one

    if [ -d ./$version ] ;
    then
        use
        exit 1
    fi

    # Fetches node from Github and install the specified version
    # as a tag

    git clone git://github.com/joyent/node.git $version
    cd $version
    git checkout master
    git checkout -q $version
    ./configure
    make
    make install

    # Return to the saved state

    cd $restore
}

list () {

    # Enter the storage dir
    cd $storage_dir

    # Get our current version
    current_version=`node -v`;

    # Echo our current version
    echo -e "Current version: $current_version\n"

    # If there are no versions installed, tell the
    # user

    if [ ! -n "`ls`" ] ;
    then
        echo -e "\t (None)"
    else
        # Enumerate the versions we have
        for ver in *
        do
            echo -e "\t $ver"
        done
    fi

    cd $restore
}

use () {

    # Enter the storage dir
    cd $storage_dir

    # Check to see if we even have the version requested
    if [ ! -d ./$version ] ;
    then
        echo -e "This version needs to be installed before it can be used."
        exit 1
    fi

    # Enter the version dir
    cd ./$version

    # Run the build and make commands
    make clean
    ./configure
    make
    make install

    # Return to saved state

    cd $restore
}

delete () {

    # Enter the storage dir
    cd $storage_dir

    # Check to see if we even have the version requested
    if [ ! -d ./$version ] ;
    then
        echo -e "This version does not exist."
        exit 1
    else
        # If so, delete it
        sudo rm -R ./$version
        echo -e "Deleted node $version."
    fi

    # Return to saved state
    cd $restore
}

usage () {

    name=`basename $0`

    echo -e "usage: $name [ install | delete | use | list ] [version] "
    echo -e " "
    echo -e "       Easily manage different versions of node.js"
    echo -e " "
    echo -e "       $name install [version] -- installs the specified version of node"
    echo -e "       $name delete  [version] -- remove the specified version of node"
    echo -e "       $name use     [version] -- switches to a pre-installed version of node"
    echo -e "       $name list              -- lists all installed versions of node"
    echo -e " "
    echo -e "       Where a [version] is version tag of the for [v]x.x.x, e.g: v0.7.10"
}

# Command interpreter

case $cmd in
    install)
        install
        ;;
    delete)
        delete
        ;;
    list)
        list
        ;;
    use)
        use
        ;;
    *)
        usage
        exit 1
        ;;
esac
